#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec3 normal_modelspace;
layout(location = 3) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec3 fragmentColor;
out vec4 normal_worldspace;
out vec4 position_worldspace;
out vec4 lightPosition_worldspace;
out vec4 scene_center;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 OM;
uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;
uniform mat4 N;
uniform vec3 LightPosition_worldspace;
uniform vec3 Scene_center;

void main(){	

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * OM * vec4(vertexPosition_modelspace, 1.0);

	position_worldspace = V * M * OM * vec4(vertexPosition_modelspace, 1.0);
	normal_worldspace = V * M * OM * vec4(normal_modelspace, 0.0);
	scene_center = vec4(Scene_center, 0.0);

	lightPosition_worldspace = vec4(LightPosition_worldspace, 1.0);
	fragmentColor = vertexColor;
	UV = vertexUV;
}